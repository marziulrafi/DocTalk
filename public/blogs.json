[
    {
        "id": 1,
        "question": "What is useState and how does it work in React?",
        "answer": "useState is a React Hook that allows you to add state to functional components. It returns an array with two elements: the current state value and a function to update it. When you call the update function, React re-renders the component with the new state."
    },
    {
        "id": 2,
        "question": "What is the purpose of useEffect in React?",
        "answer": "useEffect is a Hook that lets you perform side effects in functional components, like fetching data, setting up subscriptions, or manually changing the DOM. It runs after the component renders and can optionally clean up when the component unmounts or before re-running."
    },
    {
        "id": 3,
        "question": "What is a custom hook in React and when should you use one?",
        "answer": "A custom hook is a JavaScript function that starts with 'use' and allows you to reuse stateful logic across multiple components. Use it when you find yourself repeating similar useState, useEffect, or other hook logic in different components."
    },
    {
        "id": 4,
        "question": "Difference between controlled and uncontrolled components? Which one is better?",
        "answer": "Controlled components have their input values managed by React state, while uncontrolled components use the DOM directly via refs. Controlled components are generally preferred because they offer better control, easier validation, and predictable behavior."
    },
    {
        "id": 5,
        "question": "Tell us something about useFormStatus() (explore and explain)",
        "answer": "useFormStatus() is a React Hook introduced for form actions in React Server Components. It helps you track the current status of a form submission (like 'submitting' or 'submitted'), which is useful for disabling buttons, showing spinners, or giving user feedback during form interactions."
    }
]